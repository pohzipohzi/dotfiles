snippet dfr "defer recover"
	defer func() {
		if err := recover(); err != nil {
			${0}
		}
	}()

snippet ggm "go generate mockery"
	//go:generate mockery -name=${0} -case=underscore -inpkg

snippet cpt "competitive programming template"
	package main

	import (
		"bufio"
		"fmt"
		"os"
		"strconv"
	)

	var (
		reader Reader = NewReader()
		writer Writer = NewWriter()
	)

	type Reader interface {
		NextInt() int
		NextInt64() int64
		NextString() string
	}

	type Writer interface {
		Printf(format string, a ...interface{})
		Flush()
	}

	type readerImpl struct {
		*bufio.Scanner
	}

	func NewReader() Reader {
		s := bufio.NewScanner(os.Stdin)
		s.Split(bufio.ScanWords)
		return &readerImpl{Scanner: s}
	}

	func (i *readerImpl) NextInt() int {
		i.Scan()
		ret, _ := strconv.Atoi(i.Text())
		return ret
	}

	func (i *readerImpl) NextInt64() int64 {
		i.Scan()
		ret, _ := strconv.ParseInt(i.Text(), 10, 64)
		return ret
	}

	func (i *readerImpl) NextString() string {
		i.Scan()
		return i.Text()
	}

	type writerImpl struct {
		*bufio.Writer
	}

	func NewWriter() Writer {
		return &writerImpl{Writer: bufio.NewWriter(os.Stdout)}
	}

	func (i *writerImpl) Printf(f string, a ...interface{}) {
		fmt.Fprintf(i.Writer, f, a...)
	}

	func (i *writerImpl) Flush() {
		i.Writer.Flush()
	}

	func main() {
		defer writer.Flush()
		${0}
	}
